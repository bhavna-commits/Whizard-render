import dotenv from "dotenv";
import axios from "axios";
import Template from "../../models/templates.model.js";
import Contacts from "../../models/contacts.model.js";
import Campaign from "../../models/campaign.model.js";
import Report from "../../models/report.model.js";
import Chat from "../../models/chats.model.js";
import ChatsTemp from "../../models/chatsTemp.model.js";
import TempMessageModel from "../../models/TempMessage.model.js";

dotenv.config();

export async function sendMessages(
	campaign,
	user,
	unique_id,
	phone_number,
	addedUserId,
) {
	try {
		// Find the template by unique_id
		const template = await Template.findOne({
			unique_id: campaign.templateId,
		});

		if (!template) {
			throw `Template with ID ${campaign.templateId} not found`;
		}

		// Find contacts by contactListId
		const contactList = await Contacts.find({
			contactId: campaign.contactListId,
			subscribe: 1,
		});

		if (contactList.length === 0) {
			throw `No contacts found for contact list ID ${campaign.contactListId}`;
		}

		// Loop through each contact in the contact list
		for (let contact of contactList) {
			// Replace dynamic variables in the template with contact-specific data
			const personalizedMessage = replaceDynamicVariables(
				template,
				campaign.variables,
				contact,
			);

			// Send message using WhatsApp (assuming wa_id is the phone number)
			const response = await sendMessageThroughWhatsApp(
				user,
				template,
				contact.wa_id,
				personalizedMessage,
				phone_number,
			);

			const messageTemplate = generatePreviewMessage(
				template,
				personalizedMessage,
			);

			const components = generatePreviewComponents(
				template,
				personalizedMessage,
			);

			if (response.status === "FAILED") {
				console.error(
					`Failed to send message to ${contact.wa_id}: ${response.response}`,
				);
				throw new Error(
					`Failed to send message to ${contact.wa_id}: ${response.response}`,
				);
			}
			// Create a report for each sent message
			// Assuming newTemplate is your template object and messageTemplate is the preview text generated by generatePreviewMessage()
			const mediaPreview = getMediaPreviewFromTemplate(template);

			let reportData = {
				WABA_ID: user.WABA_ID,
				FB_PHONE_ID: phone_number,
				useradmin: user.unique_id,
				unique_id,
				campaignName: campaign.name,
				campaignId: campaign.unique_id,
				contactName: contact.Name,
				recipientPhone: contact.wa_id,
				status: response.status,
				messageId: response.response.messages[0].id,
				messageTemplate,
			};

			if (mediaPreview) {
				// If media exists, store media details instead of the messageTemplate preview.
				reportData.media = {
					url: mediaPreview.url,
					fileName: mediaPreview.fileName,
				};
			}
			const report = new Report(reportData);
			await report.save();

			reportData.components = components;
			reportData.templateId = campaign.templateId;
			reportData.templatename = template.name;
			reportData.agent = addedUserId ? addedUserId : user.unique_id;
			reportData.type = "Campaign";

			let reportData2 = {
				name: contact.Name,
				wabaId: user.WABA_ID,
				messageId: response.response.messages[0].id,
				from: contact.wa_id,
				timestamp: Date.now(),
				type: "text",
				text: { body: messageTemplate.slice(0, 11) },
				mediaId: "",
				fbPhoneId: phone_number,
				status: "sent",
			};

			await TempMessageModel.create(reportData2);
			const chat = new Chat(reportData);
			// await ChatsTemp.create(reportData);
			await chat.save();
		}

		// Update the campaign status to 'SENT' after messages are sent
		campaign.status = "SENT";
		await campaign.save();
	} catch (error) {
		console.error("Error sending messages:", error.message);
		throw new Error(`${error.message}`);
	}
}

export function replaceDynamicVariables(template, variables, contact) {
	try {
		// console.log("variables :", variables);
		const messageComponents = [];
		// variables = new Map(Object.entries(variables));
		// Process dynamic variables in Header
		// console.log(variables);
		const headerComponent = template.components.find(
			(c) => c.type === "HEADER",
		);
		if (headerComponent) {
			let headerParameters = [];
			// Handle media components based on their format (Image, Video, Document)
			if (headerComponent.format === "IMAGE") {
				console.log(headerComponent.example.header_url);
				headerParameters.push({
					type: "image",
					image: {
						link: headerComponent.example.header_url || "",
					},
				});
			} else if (headerComponent.format === "VIDEO") {
				headerParameters.push({
					type: "video",
					video: {
						link: headerComponent.example.header_url || "",
					},
				});
			} else if (headerComponent.format === "DOCUMENT") {
				headerParameters.push({
					type: "document",
					document: {
						link: headerComponent.example.header_url || "",
					},
				});
			}

			if (headerParameters.length > 0) {
				messageComponents.push({
					type: "header",
					parameters: headerParameters,
				});
			}
		}

		// Process dynamic variables in Body
		const bodyComponent = template.components.find(
			(c) => c.type === "BODY",
		);
		if (bodyComponent && template.dynamicVariables.body.length > 0) {
			let bodyParameters = [];

			template.dynamicVariables.body.forEach((bodyVar) => {
				let key = Object.keys(bodyVar)[0];
				// console.log(variables.get(key));

				if (variables.get(key) == "Name") {
					bodyParameters.push({
						type: "text",
						text: contact.Name || "",
					});
				} else if (variables.get(key)) {
					bodyParameters.push({
						type: "text",
						text: contact.masterExtra[variables.get(key)] || "",
					});
				}
			});

			messageComponents.push({
				type: "body",
				parameters: bodyParameters,
			});
		}

		return messageComponents;
	} catch (error) {
		console.error("Error replacing dynamic variables:", error.message);
		throw new Error(`Error replacing dynamic variables: ${error.message}`);
	}
}

export async function sendMessageThroughWhatsApp(
	user,
	template,
	phone,
	messageComponents,
	phone_number,
) {
	// console.log(template);
	try {
		// Construct the message payload
		const requestData = {
			messaging_product: "whatsapp",
			recipient_type: "individual",
			to: phone,
			type: "template",
			template: {
				name: template.name,
				language: { code: template.language.code },
				components: messageComponents,
			},
		};

		// Log the constructed requestData payload for debugging
		console.log(
			"Request Data Payload:",
			JSON.stringify(messageComponents, null, 2),
		);

		// Find the selected phone number from the user's array

		// Log the selected phone number details
		// console.log("Selected Phone Number:", selectedNumber);

		// Construct the API URL
		const url = `https://graph.facebook.com/${process.env.FB_GRAPH_VERSION}/${phone_number}/messages`;
		console.log("Request URL:", url);

		// Declare response variable in the outer scope
		let response;

		// Send the request using axios
		try {
			response = await axios.post(url, requestData, {
				headers: {
					Authorization: `Bearer ${user.FB_ACCESS_TOKEN}`,
					"Content-Type": "application/json",
				},
			});

			// Log the response from the WhatsApp API
			console.log("Response from WhatsApp API:", response.data);
		} catch (error) {
			console.error(
				"Error sending message:",
				error.response ? error.response.data : error.message,
			);
			throw error;
		}

		return { status: "SENT", response: response.data };
	} catch (error) {
		console.error(
			"Error sending WhatsApp message:",
			error.response?.data?.error?.message || error.message,
		);
		return {
			status: "FAILED",
			response:
				error.response?.data?.error?.error_user_msg ||
				error.response?.data?.error?.error_user_title ||
				error.response?.data?.error?.message,
		};
	}
}

export function getMediaPreviewFromTemplate(template) {
	const headerComponent = template.components.find(
		(c) => c.type === "HEADER",
	);
	if (
		headerComponent &&
		headerComponent.example &&
		headerComponent.example.header_url
	) {
		// If header_url is an array, use the first element; otherwise, assume it's a string.
		const headerUrl = Array.isArray(headerComponent.example.header_url)
			? headerComponent.example.header_url[0]
			: headerComponent.example.header_url;
		// Extract the file name from the URL (everything after the last '/')
		const fileName = headerUrl.split("/").pop();
		return { url: headerUrl, fileName };
	}
	return null;
}

export function generatePreviewMessage(template, message) {
	try {
		let previewMessage = "";

		console.log(JSON.stringify(template), JSON.stringify(message));
		// Process HEADER component
		const headerComponent = template.components.find(
			(c) => c.type === "HEADER",
		);
		if (headerComponent) {
			let headerText = headerComponent.text;
			// Find header parameters from the incoming message payload (matching type "header")
			const headerParams = message?.find(
				(c) => c.type === "header",
			)?.parameters;

			if (headerText) {
				// Replace placeholders in header text using the header parameters if available.
				if (headerParams && headerParams.length > 0) {
					headerParams.forEach((value, index) => {
						const replacement = value.text;
						headerText = headerText.replace(
							`{{${index + 1}}}`,
							replacement,
						);
					});
				}
				previewMessage += `${headerText}\n`;
			} else if (headerComponent.parameters) {
				// If no header text, iterate over headerComponent.parameters to build the header preview.
				headerComponent.parameters.forEach((param) => {
					if (param.type === "text" && param.text) {
						previewMessage += `${param.text}\n`;
					} else {
						const type = param.type;
						previewMessage += `[Image: ${param[type].link}]\n`;
					}
				});
			}
		}

		// Process BODY component
		const bodyComponent = template.components.find(
			(c) => c.type === "BODY",
		);
		if (bodyComponent) {
			let bodyText = bodyComponent.text;
			const bodyParams = message?.find(
				(c) => c.type === "body",
			)?.parameters;
			bodyParams?.forEach((value, index) => {
				bodyText = bodyText.replace(`{{${index + 1}}}`, value.text);
			});
			previewMessage += `${bodyText}\n`;
		}

		// Process FOOTER component (optional)
		const footerComponent = template.components.find(
			(c) => c.type === "FOOTER",
		);
		if (footerComponent) {
			previewMessage += `${footerComponent.text}\n`;
		}

		console.log("preiview message :", previewMessage);

		return previewMessage.trim();
	} catch (error) {
		console.error("Error generating preview message:", error.message);
		throw new Error(`Error generating preview message: ${error.message}`);
	}
}

export function generatePreviewComponents(template, message) {
	try {
		// Deep clone the template to avoid modifying the original
		const clonedTemplate = JSON.parse(JSON.stringify(template));

		// Process HEADER component
		const headerComponent = clonedTemplate.components.find(
			(c) => c.type === "HEADER",
		);
		if (headerComponent) {
			let headerText = headerComponent.text;
			// Find header parameters from the incoming message payload (matching type "header")
			const headerParams = message?.find(
				(c) => c.type === "header",
			)?.parameters;

			if (headerText) {
				// Replace placeholders in header text using the header parameters if available.
				if (headerParams && headerParams.length > 0) {
					headerParams.forEach((value, index) => {
						const replacement = value.text;
						headerText = headerText.replace(
							`{{${index + 1}}}`,
							replacement,
						);
						headerText = headerText.replace(`\n`, "");
					});
				}
				headerComponent.text = `${headerText}\n`;
			} else if (headerComponent.parameters) {
				// If no header text, iterate over headerComponent.parameters to build the header preview.
				headerComponent.parameters.forEach((param) => {
					if (param.type === "text" && param.text) {
						headerComponent.text += `${param.text}\n`;
					} else {
						const type = param.type;
						headerComponent.text += `[Image: ${param[type].link}]\n`;
					}
				});
			}
		}

		// Process BODY component
		const bodyComponent = clonedTemplate.components.find(
			(c) => c.type === "BODY",
		);
		if (bodyComponent) {
			let bodyText = bodyComponent.text;
			const bodyParams = message?.find(
				(c) => c.type === "body",
			)?.parameters;
			bodyParams?.forEach((value, index) => {
				bodyText = bodyText.replace(`{{${index + 1}}}`, value.text);
			});
			bodyText = bodyText.replace(`\n`, "");
			bodyComponent.text = `${bodyText}\n`;
		}

		// Process FOOTER component (optional)
		const footerComponent = clonedTemplate.components.find(
			(c) => c.type === "FOOTER",
		);
		if (footerComponent) {
			footerComponent.text = footerComponent.text.replace(`\n`, "");
			footerComponent.text = `${footerComponent.text}\n`;
		}

		// Return the cloned template components
		return clonedTemplate.components;
	} catch (error) {
		console.error("Error generating preview message:", error.message);
		throw new Error(`Error generating preview message: ${error.message}`);
	}
}

export async function sendTestMessage(
	user,
	templateId,
	variables,
	contactListId,
	test,
	phone_number,
) {
	try {
		// Find the template by unique_id
		const template = await Template.findOne({
			unique_id: templateId,
		});

		if (!template) {
			throw new Error(`Template with ID ${templateId} not found`);
		}

		// Find contacts by contactListId
		const contactList = await Contacts.find({
			contactId: contactListId,
			wa_id: test,
			subscribe: 1,
		});

		if (contactList.length === 0) {
			throw new Error(
				`No contacts found for contact list ID ${contactListId}`,
			);
		}

		// Loop through each contact in the contact list
		const contact = contactList[0];

		if (typeof variables === "object" && !Array.isArray(variables)) {
			variables = new Map(Object.entries(variables));
		}

		// Replace dynamic variables in the template with contact-specific data
		const personalizedMessage = replaceDynamicVariables(
			template,
			variables,
			contact,
		);

		const response = await sendMessageThroughWhatsApp(
			user,
			template,
			test,
			personalizedMessage,
			phone_number,
		);

		const messageTemplate = generatePreviewMessage(
			template,
			personalizedMessage,
		);

		const components = generatePreviewComponents(
			template,
			personalizedMessage,
		);

		if (response.status === "FAILED") {
			console.error(
				`Failed to send message to ${test}: ${response.response}`,
			);
			throw new Error(
				`Failed to send message to ${test}: ${response.response}`,
			);
		}

		return {
			messageTemplate,
			data: response.response,
			components,
			templatename: template.name,
		};
	} catch (error) {
		console.error("Error sending messages:", error.message || error);
		throw error.message || error;
	}
}
