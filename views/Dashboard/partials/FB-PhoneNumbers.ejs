<div class="max-w-2xl flex items-center space-x-3 <%= status === 'Pending' ? 'hidden' : '' %>">
	<div id="dropdown" class="relative inline-block min-w-56">
		<!-- Button to show selected phone number or "Select phone number" -->
		<% if (access?.dashboard?.addPhoneNumber) { %>
		<button id="dropdownButton" class="bg-white border shadow-sm text-[#959595] border-gray-300 rounded-md w-full p-2 text-left flex items-center justify-between">
			<span id="selectedOption" class="">
				<% 
          // Find the selected phone number and display it
          const selectedNumber = user.FB_PHONE_NUMBERS.find(number => number.selected == true);
        //   console.log(selectedNumber);
        %>
				<%= selectedNumber ? (selectedNumber.friendly_name || selectedNumber.phone_number_id) : "Select phone number" %>
			</span>
			<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
				<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
			</svg>
		</button>
		<% } else { %>
		<button disabled class="bg-white border shadow-sm text-[#959595] border-gray-300 rounded-md w-full p-2 text-left flex items-center justify-between hover:cursor-not-allowed" title="You don't have permissions to access this">
			<span id="selectedOption" class="">
				<% 
          // Find the selected phone number and display it
          const selectedNumber = user.FB_PHONE_NUMBERS.find(number => number.selected == true);
        //   console.log(selectedNumber);
        %>
				<%= selectedNumber ? (selectedNumber.friendly_name || selectedNumber.phone_number_id) : "Select phone number" %>
			</span>
			<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
				<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
			</svg>
		</button>
		<% } %>
		<!-- Dropdown menu with list of phone numbers -->
		<div id="dropdownMenu" class="hidden absolute w-full mt-2 bg-white border border-gray-300 rounded-md shadow-lg max-h-48 overflow-y-auto z-10">
			<div class="flex justify-center items-center p-3">
				<div class="buttonLoader hidden loader border-t-white border-4 border-black rounded-full w-6 h-6 animate-spin"></div>
			</div>
			<ul id="dropdownUl" class="p-2">
				<% user.FB_PHONE_NUMBERS.forEach((number, index) => { %>
				<li class="p-2 hover:bg-gray-100 flex items-center justify-between rounded cursor-pointer" data-value="<%= number.phone_number_id %>" data-verified="<%= number.verified %>">
					<div class="flex items-center">
						<span><%= number.friendly_name || number.phone_number_id %></span>
						<% if (number.verified) { %>
						<img src="svg/verifiedNumber.svg" class="w-5 h-5 mb-1 ml-2" alt="Verified" title="Verified Number" />
						<% } %>
					</div>
					<!-- <img onclick="deletePhoneNumber(event, '<%= number.phone_number_id %>')" src="svg/bin.svg" alt="bin" title="Delete Number" /> -->
				</li>
				<% }); %>
			</ul>
		</div>
	</div>
	
	<!-- Button to add a new phone number -->
	<% if (access?.dashboard?.addPhoneNumber) { %>
	<button onclick="openAddNumber()" type="button" class="bg-black text-white p-2 rounded-md flex items-center">
		<img src="svg/plus.svg" class="h-5 pr-2" alt="plus" />Add Phone Number
	</button>
	<% } else { %>
	<button disabled type="button" class="bg-black text-white p-2 rounded-md flex items-center hover:cursor-not-allowed" title="You don't have permissions to access this">
		<img src="svg/plus.svg" class="h-5 pr-2" alt="plus" />Add Phone Number
	</button>
	<% } %>
</div>

<!-- Modal Structure -->
<div class="fixed inset-0 flex items-center justify-center transition-opacity duration-300 ease-out opacity-0 hidden z-50" id="addNumberModal">
	<!-- Background overlay with blur -->
	<div class="absolute inset-0 bg-gray-900 bg-opacity-50  transition-opacity duration-300 ease-out" onclick="closeAddNumber(event)"></div>
	
	<!-- Modal content -->
	<div id="modalContent" class="relative bg-white rounded-lg shadow-lg w-96 p-6 transition-opacity duration-300 ease-out opacity-100 scale-100">
		
		<!-- Close Button -->
		<button onclick="closeAddNumber(event)" class="absolute top-2 right-2 text-gray-500 hover:text-gray-700 text-3xl p-3">&times;</button>
		
		<!-- Add Number Form -->
		<div id="addNumberForm">
			<h2 class="text-xl font-semibold mb-6">Add phone number</h2>
			
			<!-- Error Message -->
			<div id="addNewNumberError" class="mb-4 p-3 hidden bg-red-100 text-red-700 rounded"></div>
			
			<form onsubmit="addPhoneNumber(event)">
				<!-- Name Field -->
				<div class="mb-4">
					<label class="block text-[#959595] mb-2">Name</label>
					<input type="text" name="name" id="name" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter phone number's name" required>
				</div>
				
				<!-- Country Code Field -->
				<div class="mb-4">
					<label class="block text-[#959595] mb-2">Country Code</label>
					<input type="tel" name="countryCode" id="countryCode" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter country code" required>
				</div>
				
				<!-- Phone Number Field -->
				<div class="mb-4">
					<label class="block text-[#959595] mb-2">Phone Number</label>
					<input type="tel" name="phoneNumber" id="phoneNumber" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter phone number" required>
				</div>
				
				<!-- Register Button -->
				<button type="submit" id="submitButton" class="bg-gray-400 flex justify-center items-center text-white px-4 py-2 rounded w-full cursor-not-allowed relative" disabled>
					<span class="buttonText">Register number</span>
					<div class="buttonLoader hidden loader border-t-white border-4 border-blue rounded-full w-6 h-6 animate-spin"></div>
				</button>
			</form>
		</div>
		
		<!-- Verify Number Form (Initially hidden) -->
		<div id="verifyNumberForm" class="hidden">
			<h2 class="text-xl font-semibold mb-6">Verify Number</h2>
			<div id="otpStatus" class="mb-4 p-3 hidden bg-red-100 text-red-700 rounded"></div>
			<form onsubmit="verifyPhoneNumber(event)">
				<input type="hidden" name="phoneNumber" id="hiddenPhoneNumber">
				<div class="mb-4">
					<label class="block text-[#959595] mb-2">Verification Code</label>
					<input type="text" name="code" id="verificationCode" class="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter OTP" required>
				</div>
				
				<!-- Verify Button -->
				<button type="submit" id="verifyButton" class="bg-gray-400 flex justify-center items-center text-white px-4 py-2 rounded w-full cursor-not-allowed relative" disabled>
					<span class="buttonText">Verify Number</span>
					<div class="buttonLoader hidden loader border-t-white border-4 border-black rounded-full w-6 h-6 animate-spin"></div>
				</button>
			</form>
		</div>
		
		<!-- Verify Number Form (Initially hidden) -->
		<div id="twoFactorForm" class="hidden">
			<h2 class="text-xl font-semibold mb-6">Register Number</h2>
			<div id="set2FAPinStatus" class="mb-4 p-3 hidden bg-red-100 text-red-700 rounded"></div>
			<form onsubmit="twoFactorAuthentication(event)">
				<input type="hidden" name="phoneNumber" id="hiddenPhoneNumber" value="+1234567890">
				<div class="mb-4">
					<label class="block text-[#959595] mb-2">Enter 2FA Pin</label>
					<div class="d-flex gap-2">
						<% for(let i = 1; i <= 6; i++) { %>
						<input type="text" class="form-control otp-input" maxlength="1" required />
						<% } %>
					</div>
				</div>
				<!-- Verify Button -->
				<button type="submit" id="set2FAPinButton" class="bg-gray-400 flex justify-center items-center text-white px-4 py-2 rounded w-full cursor-not-allowed relative" disabled>
					<span class="set2FAText">Set Pin</span>
					<div class="set2FALoader loader hidden border-t-white border-4 border-black rounded-full w-6 h-6 animate-spin"></div>
				</button>
			</form>
		</div>
		
	</div>
</div>

<!-- JavaScript for handling the modal -->
<script>
	const dropdownButton = document.getElementById('dropdownButton');
	const dropdownMenu = document.getElementById('dropdownMenu');
	const selectedOption = document.getElementById('selectedOption');
	
	let isLoading = false;
	
	// Toggle dropdown visibility
	dropdownButton.addEventListener('click', async (e) => {
		e.preventDefault();
		const loader = document.querySelector(".buttonLoader");
		const text = document.getElementById("dropdownUl");
		if (!isLoading) {
			dropdownMenu.classList.toggle('hidden');
		}
		try {
			// Show the loader
			loader.classList.remove("hidden");
			text.classList.add("hidden");
			// Fetch the refreshed phone numbers partial HTML from the server
			const response = await fetch("/api/dashboard/refresh-phone-numbers");
			if (!response.ok) throw new Error("Failed to fetch phone numbers");
			const html = await response.text();
			
			// Update the dropdown menu's inner HTML with the refreshed list
			text.innerHTML = html;
			
			// Optionally toggle the dropdown visibility
			// dropdownMenu.classList.toggle("hidden");
		} catch (error) {
			console.error("Error updating phone numbers:", error);
			alert(error.message);
		} finally {
			loader.classList.add("hidden");
			text.classList.remove("hidden");
		}
		
	});
	
	// Enable the verify button when the user types in the PIN (optional)
	document.getElementById("verificationCode").addEventListener("input", function () {
		const verifyButton = document.getElementById("verifyButton");
		verifyButton.disabled = this.value.trim().length === 0;
	});
	
	document.getElementById("phoneNumber").addEventListener("input", validateForm);
	document.getElementById("name").addEventListener("input", validateForm);
	document.getElementById("countryCode").addEventListener("input", validateForm);
	document.getElementById("verificationCode").addEventListener("input", validateVerifyForm);
	
	// Create a spinner element (Tailwind CSS)
	const createSpinner = () => {
		const spinner = document.createElement('div');
		spinner.classList.add('spinner', 'border-2', 'border-gray-300', 'border-t-transparent', 'rounded-full', 'animate-spin', 'h-5', 'w-5', 'inline-block', 'ml-2');
		return spinner;
	};
	
	// Assume otpInputs is defined as all inputs with the "otp-input" class
	const otpInputs = document.querySelectorAll(".otp-input");
	
	// Function to check if all OTP inputs are filled
	function checkOTPInputs () {
		// Convert NodeList to Array and check if every input has exactly one digit
		const allFilled = Array.from(otpInputs).every(input => input.value.length == 1);
		const setPinButton = document.getElementById("set2FAPinButton");
		// console.log("here");
		if (allFilled) {
			setPinButton.disabled = false;
			// Remove disabled styling and add enabled styling (adjust classes as needed)
			setPinButton.classList.remove("bg-gray-400", "cursor-not-allowed");
			setPinButton.classList.add("bg-blue-600", "cursor-pointer");
		} else {
			setPinButton.disabled = true;
			setPinButton.classList.add("bg-gray-400", "cursor-not-allowed");
			setPinButton.classList.remove("bg-blue-600", "cursor-pointer");
		}
	}
	
	otpInputs.forEach((input, index) => {
		input.addEventListener("input", (event) => {
			// Remove any non-digit characters
			input.value = input.value.replace(/\D/g, "");
			
			// Move to the next input if one digit is entered
			if (input.value.length === 1 && index
				
				<
				otpInputs.length - 1) {
				otpInputs[index + 1].focus();
			} // Check if all OTP inputs are filled after this change checkOTPInputs(); });
			
			checkOTPInputs();
		});
		
		input.addEventListener("keydown", (event) => {
			// Allow backspace to go to the previous input if the current one is empty
			if (event.key === "Backspace" && input.value.length === 0 && index > 0) {
				otpInputs[index - 1].focus();
			}
		});
		
		input.addEventListener("paste", (event) => {
			// Handle paste: only take numeric values
			let pasteData = event.clipboardData.getData("text");
			// Remove all non-digit characters from the pasted data
			pasteData = pasteData.replace(/\D/g, "");
			const otpArray = pasteData.split("").slice(0, otpInputs.length);
			
			otpArray.forEach((char, i) => {
				otpInputs[i].value = char;
			});
			
			// Prevent the default paste action
			event.preventDefault();
			// Check if all OTP inputs are filled after paste
			checkOTPInputs();
		});
		
	});
	
	const dropdownUl = document.getElementById("dropdownUl");
	
	dropdownUl.addEventListener("click", (event) => {
		// Find the closest li element in case a child element was clicked
		const option = event.target.closest("li");
		if (!option) return; // Exit if the click wasn't on an li element
		
		// Prevent the click from propagating further
		event.stopPropagation();
		
		// If a loading flag is active, ignore the click
		if (isLoading) return;
		
		// Retrieve the selected text and other attributes
		const selectedText = option.querySelector("span").textContent;
		const phoneNumberId = option.getAttribute("data-value");
		const isVerified = option.getAttribute("data-verified") === "true";
		
		if (!isVerified) {
			openVerifyModal(event, phoneNumberId);
			return;
		}
		
		// Show spinner and update selection
		isLoading = true;
		const spinner = createSpinner();
		selectedOption.textContent = "";
		selectedOption.appendChild(spinner);
		dropdownMenu.classList.add("hidden");
		
		// Trigger the POST request to select the number
		fetch("/api/dashboard/select-number", {
				method: "POST",
				headers: {
					"Content-Type": "application/json"
				},
				body: JSON.stringify({
					phoneNumberId
				})
			})
			.then((response) => response.json())
			.then((data) => {
				if (data.success) {
					selectedOption.innerHTML = selectedText;
				} else {
					alert(data.message);
					selectedOption.textContent = "Select phone number";
				}
			})
			.catch((error) => {
				console.error("Error selecting phone number:", error);
				alert(error);
				selectedOption.textContent = "Select phone number";
			})
			.finally(() => {
				isLoading = false;
			});
	});
	
	function openVerifyModal (e, phoneNumberId) {
		openAddNumber();
		// Set the phone number in the hidden field so the verification form knows which number to verify.
		document.getElementById('hiddenPhoneNumber').value = phoneNumberId;
		
		const codeMethod = "SMS"; // or "VOICE"
		const language = "en_US"; // example language
		
		generateOTP(e, phoneNumberId, codeMethod, language)
		// Hide the add number form and show the verify form:
		document.getElementById('addNumberForm').classList.add('hidden');
		document.getElementById('verifyNumberForm').classList.remove('hidden');
		// Finally, open the modal (for example, by removing the 'hidden' class)
		document.getElementById('addNumberModal').classList.remove('hidden');
	}
	
	// Close dropdown if clicked outside
	document.addEventListener('click', (e) => {
		if (!dropdownButton.contains(e.target) && !dropdownMenu.contains(e.target)) {
			dropdownMenu.classList.add('hidden');
		}
	});
	
	// function to generateOTP to verify number
	async function generateOTP (event, phoneNumberId, codeMethod, language) {
		const buttonLoader = document.querySelectorAll(".buttonLoader")[1];
		// console.log(buttonLoader);
		const buttonText = document.querySelectorAll(".buttonText")[1];
		try {
			
			// Show the loader and hide the button text
			buttonLoader.classList.remove("hidden");
			buttonText.classList.add("hidden");
			
			const response = await fetch("/api/dashboard/send-otp", {
				method: "POST",
				headers: {
					"Content-Type": "application/json"
				},
				body: JSON.stringify({
					phoneNumberId, // the selected phone number ID
					code_method: codeMethod,
					language: language
				})
			});
			
			// Hide loader and show button text
			buttonLoader.classList.add("hidden");
			buttonText.classList.remove("hidden");
			
			const data = await response.json();
			if (data.success) {
				document.getElementById("otpStatus").classList.remove("bg-red-100", "text-red-700", "hidden")
				document.getElementById("otpStatus").classList.add("text-green-500", "bg-green-100")
				document.getElementById("otpStatus").innerText = "OTP sent successfully";
			} else {
				document.getElementById("otpStatus").classList.remove("hidden")
				document.getElementById("otpStatus").innerText = data.message || "Failed to send OTP. Please try again.";
			}
		} catch (error) {
			document.getElementById("otpStatus").innerText = "An error occurred. Please try again.";
			console.error("Error sending OTP:", error);
		} finally {
			buttonLoader.classList.add("hidden");
			buttonText.classList.remove("hidden");
			setTimeout(() => {
				document.getElementById("otpStatus").classList.add("hidden")
			}, 2000);
		}
	}
	
	// JavaScript: complete the twoFactorAuthentication function
	function twoFactorAuthentication (e) {
		e.preventDefault();
		
		// Retrieve values from form fields
		const phoneNumberId = document.getElementById("hiddenPhoneNumber").value;
		const otpInputs = [...document.querySelectorAll(".otp-input")];
		const pin = otpInputs.map((input) => input.value).join("");
		const otpStatus = document.getElementById("set2FAPinStatus");
		const verifyButton = document.getElementById("verifyButton");
		const buttonLoader = document.querySelector(".set2FALoader");
		const buttonText = document.querySelector(".set2FAText");
		// Clear any previous status message and show the loader
		otpStatus.classList.add("hidden");
		otpStatus.textContent = "";
		verifyButton.disabled = true;
		buttonLoader.classList.remove("hidden");
		buttonText.classList.add("hidden");
		// Make a POST request to verify the 2FA PIN
		fetch("/api/dashboard/set-2FA-pin", {
				method: "POST",
				headers: {
					"Content-Type": "application/json"
				},
				body: JSON.stringify({
					phoneNumberId,
					pin
				})
			})
			.then(response => response.json())
			.then(data => {
				if (data.success) {
					location.reload();
				} else {
					// Show error message
					otpStatus.textContent = data.message || "Verification failed. Please try again.";
					otpStatus.classList.remove("hidden");
				}
			})
			.catch(error => {
				console.error("Error:", error);
				otpStatus.textContent = "An error occurred. Please try again later.";
				otpStatus.classList.remove("hidden");
			})
			.finally(() => {
				// Hide loader and re-enable the button
				verifyButton.disabled = false;
				buttonLoader.classList.add("hidden");
                buttonText.classList.remove("hidden");
			});
	}
	
	function validateForm () {
		const name = document.getElementById("name").value.trim();
		const countryCode = document.getElementById("countryCode").value.trim();
		const phoneNumber = document.getElementById("phoneNumber").value.trim();
		
		// Regex for country code: must start with a '+' followed by one or more digits.
		const countryCodeRegex = /^\+[0-9]+$/;
		// Regex for phone number: exactly 10-15 digits.
		const phoneRegex = /^[0-9]{10,15}$/;
		
		const errorBox = document.getElementById("addNewNumberError");
		let errorMessage = "";
		
		// Only show an error for name if the user has typed something and it's empty.
		if (name.length > 0 && name === "") {
			errorMessage += "Name is required.<br>";
		}
		// Alternatively, if you want to always require name once a user interacts,
		// you can uncomment the next line:
		// if (name.length === 0) errorMessage += "Name is required.<br>";
		
		// Validate country code only if the user has typed something.
		if (countryCode.length > 0 && !countryCodeRegex.test(countryCode)) {
			errorMessage += "Invalid country code. Must start with '+' followed by digits.<br>";
		}
		
		// Validate phone number only if the user has typed something.
		if (phoneNumber.length > 0 && !phoneRegex.test(phoneNumber)) {
			errorMessage += "Invalid phone number. Must be 10-15 digits.<br>";
		}
		
		// Display errors only if any exist.
		if (errorMessage) {
			errorBox.innerHTML = errorMessage;
			errorBox.classList.remove("hidden");
		} else {
			errorBox.classList.add("hidden");
		}
		
		// The form is considered valid only if all fields are non-empty and valid.
		const isValid =
			name.length > 0 &&
			countryCodeRegex.test(countryCode) &&
			phoneRegex.test(phoneNumber);
		
		const submitButton = document.getElementById("submitButton");
		if (isValid) {
			submitButton.disabled = false;
			submitButton.classList.remove("bg-gray-400", "cursor-not-allowed");
			submitButton.classList.add("bg-black", "cursor-pointer");
		} else {
			submitButton.disabled = true;
			submitButton.classList.add("bg-gray-400", "cursor-not-allowed");
			submitButton.classList.remove("bg-black", "cursor-pointer");
		}
	}
	
	function validateVerifyForm () {
		const code = document.getElementById("verificationCode").value.trim();
		const codeRegex = /^[0-9]{6}$/; // Only numbers with 6 digits
		
		const verifyButton = document.getElementById("verifyButton");
		
		if (codeRegex.test(code)) {
			verifyButton.disabled = false;
			verifyButton.classList.remove("bg-gray-400", "cursor-not-allowed");
			verifyButton.classList.add("bg-black", "cursor-pointer");
		} else {
			verifyButton.disabled = true;
			verifyButton.classList.add("bg-gray-400", "cursor-not-allowed");
			verifyButton.classList.remove("bg-black", "cursor-pointer");
		}
	}
	
	async function addPhoneNumber (event) {
		event.preventDefault();
		
		const name = document.getElementById("name").value;
		const countryCode = document.getElementById("countryCode").value;
		const phoneNumber = document.getElementById("phoneNumber").value;
		
		const buttonLoader = event.target.querySelector(".buttonLoader");
		const buttonText = event.target.querySelector(".buttonText");
		
		try {
			// Show loader and hide button text
			buttonLoader.classList.remove("hidden");
			buttonText.classList.add("hidden");
			
			let response = await fetch("/api/dashboard/add-number", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					name: name,
					cc: countryCode,
					phoneNumber: phoneNumber,
				}),
			});
			
			response = await response.json();
			
			buttonLoader.classList.add("hidden");
			buttonText.classList.remove("hidden");
			
			
			if (response.success) {
				document.getElementById("addNewNumberError").classList.add("hidden");
				
				// Hide add number form and show verification form
				document.getElementById("addNumberForm").classList.add("hidden");
				document.getElementById("verifyNumberForm").classList.remove("hidden");
				
				// Pass phone number to hidden input in the verify form
				document.getElementById("hiddenPhoneNumber").value = phoneNumber;
			} else {
				// console.log(response);
				document.getElementById("addNewNumberError").classList.remove("hidden");
				document.getElementById("addNewNumberError").innerText = response.message;
			}
		} catch (error) {
			document.getElementById("addNewNumberError").classList.remove("hidden");
			document.getElementById("addNewNumberError").innerText = "An error occurred. Please try again.";
		} finally {
			buttonLoader.classList.add("hidden");
			buttonText.classList.remove("hidden");
		}
	}
	
	async function verifyPhoneNumber (event) {
		event.preventDefault();
		
		const codeInput = document.getElementById("verificationCode").value;
		const phoneNumberInput = document.getElementById("hiddenPhoneNumber").value;
		
		const buttonLoader = event.target.querySelector(".buttonLoader");
		const buttonText = event.target.querySelector(".buttonText");
		
		try {
			buttonLoader.classList.remove("hidden");
			buttonText.classList.add("hidden");
			
			const response = await fetch("/api/dashboard/verify-number", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					code: codeInput,
					phoneNumberId: phoneNumberInput,
				}),
			});
			
			buttonLoader.classList.add("hidden");
			buttonText.classList.remove("hidden");
			
			if (response.ok) {
				document.getElementById("verifyNewNumberError").classList.add("hidden");
				window.location.reload(); // Or redirect the user
			} else {
				document.getElementById("verifyNewNumberError").classList.remove("hidden");
				document.getElementById("verifyNewNumberError").innerText = "Verification failed. Please try again.";
			}
		} catch (error) {
			buttonLoader.classList.add("hidden");
			buttonText.classList.remove("hidden");
			document.getElementById("verifyNewNumberError").classList.remove("hidden");
			document.getElementById("verifyNewNumberError").innerText = "An error occurred. Please try again.";
		}
	}
	
	async function selectPhoneNumber (event) {
		event.preventDefault(); // Prevent default form submission
		const phoneNumberId = event.target.phoneNumberId.value;
		const buttonLoader = event.target.querySelector('.buttonLoader');
		const buttonText = event.target.querySelector('.buttonText');
		
		try {
			// Show loader and hide button text
			buttonLoader.classList.remove('hidden');
			buttonText.classList.add('hidden');
			
			const response = await fetch('/api/dashboard/select-number', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					phoneNumberId
				}),
			});
			
			// Hide loader and show button text after the request
			buttonLoader.classList.add('hidden');
			buttonText.classList.remove('hidden');
			
			if (response.ok) {
				window.location.reload(); // Reload the page or redirect
			} else {
				alert("Failed to select phone number. Please try again.");
			}
		} catch (error) {
			// Hide loader and show button text if an error occurs
			
			alert(error);
		} finally {
			buttonLoader.classList.add('hidden');
			buttonText.classList.remove('hidden');
		}
	}
	
	async function deletePhoneNumber (event, phoneNumberId) {
		event.stopPropagation();
		
		const buttonLoader = event.currentTarget.querySelector('.buttonLoader');
		const buttonText = event.currentTarget.querySelector('.buttonText');
		
		// Show loader (if present)
		if (buttonLoader) buttonLoader.classList.remove('hidden');
		if (buttonText) buttonText.classList.add('hidden');
		
		try {
			const response = await fetch('/api/dashboard/delete-phone-number', {
				method: 'DELETE',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					phoneNumberId
				}),
			});
			
			// Hide loader and show button text after the request
			if (buttonLoader) buttonLoader.classList.add('hidden');
			if (buttonText) buttonText.classList.remove('hidden');
			
			if (response.ok) {
				window.location.reload(); // Reload the page on success
			} else {
				const errorData = await response.json();
				alert("Failed to delete phone number: " + errorData.message);
			}
		} catch (error) {
			alert(error);
		} finally {
			if (buttonLoader) buttonLoader.classList.add('hidden');
			if (buttonText) buttonText.classList.remove('hidden');
		}
	}
	// Open the modal with a transition
	function openAddNumber () {
		const modal = document.getElementById("addNumberModal");
		const modalContent = document.getElementById("modalContent");
		
		// Remove the "hidden" class to make the modal visible
		modal.classList.remove("hidden");
		
		// Use requestAnimationFrame to ensure transition triggers after the modal is visible
		requestAnimationFrame(() => {
			modal.classList.remove("opacity-0");
			modal.classList.add("opacity-100", "backdrop-blur-sm");
			modalContent.classList.remove("opacity-0", "scale-95");
			modalContent.classList.add("opacity-100", "scale-100");
		});
	}
	
	// Close the modal with a transition
	function closeAddNumber () {
		const modal = document.getElementById("addNumberModal");
		const modalContent = document.getElementById("modalContent");
		
		// Reverse the transition
		modal.classList.remove("opacity-100", "backdrop-blur-sm");
		modal.classList.add("opacity-0");
		
		modalContent.classList.remove("opacity-100", "scale-100");
		modalContent.classList.add("opacity-0", "scale-95");
		
		// Wait for the transition to complete before hiding the modal
		setTimeout(() => {
			modal.classList.add("hidden");
		}, 300); // Match the duration of the CSS transition
	}
	
	function openSet2FAPin (phoneNumberId) {
		document.getElementById("hiddenPhoneNumber").value = phoneNumberId;
		document.getElementById("addNumberForm").classList.add("hidden");
		document.getElementById("twoFactorForm").classList.remove("hidden");
		openAddNumber();
	}
</script>