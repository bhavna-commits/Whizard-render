<div id="passwordModal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center items-center">
	<div class="bg-white p-8 rounded-lg shadow-lg max-w-lg w-full">
		<h2 class="text-2xl font-semibold mb-4">Change Password</h2>
		
		<!-- Current Password -->
		<div class="mb-4">
			<label for="currentPassword" class="block text-base font-medium text-gray-700">Current Password *</label>
			<input type="password" id="currentPassword" class="w-full p-2 border rounded-lg mt-1 focus:ring focus:ring-blue-500">
		</div>
		
		<!-- New Password -->
		<div class="mb-4">
			<label for="newPassword" class="block text-base font-medium text-gray-700">New Password *</label>
			<input type="password" id="newPassword" class="w-full p-2 border rounded-lg mt-1 focus:ring focus:ring-blue-500">
			<div class="mt-2 text-base text-gray-600 space-y-1">
				<p id="charLength" class="text-red-600">✘ At least 8 characters</p>
				<p id="lowercase" class="text-red-600">✘ One lowercase letter</p>
				<p id="uppercase" class="text-red-600">✘ One uppercase letter</p>
				<p id="number" class="text-red-600">✘ One number</p>
				<p id="specialChar" class="text-red-600">✘ One special character</p>
			</div>
		</div>
		
		<!-- Confirm New Password -->
		<div class="mb-4">
			<label for="confirmPassword" class="block text-base font-medium text-gray-700">Confirm New Password *</label>
			<input type="password" id="confirmPassword" class="w-full p-2 border rounded-lg mt-1 focus:ring focus:ring-blue-500">
		</div>
		
		<!-- Logout from all devices -->
		<div class="mb-4 flex items-center">
			<input type="checkbox" id="logoutDevices" class="h-4 w-4 text-blue-600 border-gray-300 rounded">
			<label for="logoutDevices" class="ml-2 block text-base text-gray-900">Logout from all devices</label>
		</div>
		
		<!-- Modal Buttons -->
		<div class="flex justify-between">
			<button type="button" id="closeModalBtn" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-lg">Cancel</button>
			<button type="button" id="savePasswordBtn" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg">Save</button>
		</div>
	</div>
</div>

<script>
	// Toggle modal visibility
	const openModalBtn = document.getElementById('openModalBtn');
	const closeModalBtn = document.getElementById('closeModalBtn');
	const passwordModal = document.getElementById('passwordModal');
	
	openModalBtn.addEventListener('click', () => {
		passwordModal.classList.remove('hidden');
	});
	
	closeModalBtn.addEventListener('click', () => {
		passwordModal.classList.add('hidden');
	});
	
	// Password validation (example logic)
	const newPassword = document.getElementById('newPassword');
	const confirmPassword = document.getElementById('confirmPassword');
	const charLength = document.getElementById('charLength');
	const lowercase = document.getElementById('lowercase');
	const uppercase = document.getElementById('uppercase');
	const number = document.getElementById('number');
	const specialChar = document.getElementById('specialChar');
	const currentPassword = document.getElementById('currentPassword');
	const currentPasswordError = document.getElementById('currentPasswordError');
	const confirmPasswordError = document.getElementById('confirmPasswordError');
	const savePasswordBtn = document.getElementById('savePasswordBtn');
	
	newPassword.addEventListener('input', (e) => {
		const value = e.target.value;
		
		// Validate password criteria and toggle between '✘' and '✔'
		if (value.length >= 8) {
			charLength.classList.add('text-green-600');
			charLength.classList.remove('text-red-600');
			charLength.innerHTML = '✔ At least 8 characters';
		} else {
			charLength.classList.add('text-red-600');
			charLength.classList.remove('text-green-600');
			charLength.innerHTML = '✘ At least 8 characters';
		}
		
		if (/[a-z]/.test(value)) {
			lowercase.classList.add('text-green-600');
			lowercase.classList.remove('text-red-600');
			lowercase.innerHTML = '✔ One lowercase letter';
		} else {
			lowercase.classList.add('text-red-600');
			lowercase.classList.remove('text-green-600');
			lowercase.innerHTML = '✘ One lowercase letter';
		}
		
		if (/[A-Z]/.test(value)) {
			uppercase.classList.add('text-green-600');
			uppercase.classList.remove('text-red-600');
			uppercase.innerHTML = '✔ One uppercase letter';
		} else {
			uppercase.classList.add('text-red-600');
			uppercase.classList.remove('text-green-600');
			uppercase.innerHTML = '✘ One uppercase letter';
		}
		
		if (/[0-9]/.test(value)) {
			number.classList.add('text-green-600');
			number.classList.remove('text-red-600');
			number.innerHTML = '✔ One number';
		} else {
			number.classList.add('text-red-600');
			number.classList.remove('text-green-600');
			number.innerHTML = '✘ One number';
		}
		
		if (/[\W_]/.test(value)) {
			specialChar.classList.add('text-green-600');
			specialChar.classList.remove('text-red-600');
			specialChar.innerHTML = '✔ One special character';
		} else {
			specialChar.classList.add('text-red-600');
			specialChar.classList.remove('text-green-600');
			specialChar.innerHTML = '✘ One special character';
		}
	});
	savePasswordBtn.addEventListener('click', async () => {
		// Reset errors
		currentPasswordError.classList.add('hidden');
		confirmPasswordError.classList.add('hidden');
		
		// Check if new password and confirm password match
		if (newPassword.value !== confirmPassword.value) {
			confirmPasswordError.classList.remove('hidden');
			return;
		}
		
		// Send data to backend
		const response = await fetch('/api/settings/update-password', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({
				currentPassword: currentPassword.value,
				newPassword: newPassword.value,
				logoutDevices: document.getElementById('logoutDevices').checked,
			}),
		});
		
		const data = await response.json();
		if (response.ok) {
			alert('Password updated successfully');
			// Close modal after success
			passwordModal.classList.add('hidden');
		} else {
			if (data.error === 'incorrect_password') {
				currentPasswordError.classList.remove('hidden');
			} else {
				alert(data.message || 'An error occurred.');
			}
		}
	});
</script>